// Script para eliminar pedidos problem√°ticos
// Ejecutar con: node fix-orders.js

require('dotenv').config();
const { sequelize } = require('./src/config/db');
const { Pedido, DetallePedido, HistorialPedido, Pago } = require('./src/models');

const deleteProblematicOrders = async () => {
  try {
    console.log('üîß Iniciando limpieza de pedidos problem√°ticos...');
    
    // IDs de los pedidos a eliminar (incluimos m√°s por si acaso)
    const pedidosIds = [5, 6, 7]; // Agregamos el 7 por si es el tercer pedido problem√°tico
    
    // Iniciar transacci√≥n
    const t = await sequelize.transaction();
    
    try {
      // Eliminar detalles de pedidos
      const detallesDeleted = await DetallePedido.destroy({
        where: { pedido_id: pedidosIds },
        transaction: t
      });
      console.log(`‚úì Detalles eliminados: ${detallesDeleted}`);
      
      // Eliminar historial
      const historialDeleted = await HistorialPedido.destroy({
        where: { pedido_id: pedidosIds },
        transaction: t
      });
      console.log(`‚úì Historial eliminado: ${historialDeleted}`);
      
      // Eliminar pagos
      const pagosDeleted = await Pago.destroy({
        where: { pedido_id: pedidosIds },
        transaction: t
      });
      console.log(`‚úì Pagos eliminados: ${pagosDeleted}`);
      
      // Eliminar pedidos
      const pedidosDeleted = await Pedido.destroy({
        where: { id: pedidosIds },
        transaction: t
      });
      console.log(`‚úì Pedidos eliminados: ${pedidosDeleted}`);
      
      // Confirmar transacci√≥n
      await t.commit();
      
      console.log('‚úÖ Limpieza completada exitosamente');
      console.log('üìã Pedidos #5, #6 y #7 han sido eliminados del sistema');
      
    } catch (error) {
      await t.rollback();
      throw error;
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
  } finally {
    await sequelize.close();
  }
};

// Ejecutar la funci√≥n
deleteProblematicOrders();
